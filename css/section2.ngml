
`section.Side Effects`
`p.
I have described linguistic models structurally based on Semantic Graphs and 
conceptually based on Type Theory %-- modeling inter-word relations in terms of 
`q.annotations` on graph edges, and labeling words in (at least roughly) 
type-theoretic ways.  Inter-word connections include those between 
`q.head` and `q.dependent` elements, demarcating and organizing each phrase, 
where the `q.head` word has a functional role, triggering its dependents 
to be re-conceptualized (for example, to be understood in more concrete than abstract terms).   
`p`

`p.
To what degree can `i.semantic` information be captured by this 
functional-applicative foundation?  For example, if adjectives 
(`NounToNoun;) map nouns to other nouns (or noun-phrases, which in 
terms of role are just nouns), what purpose do adjectives `i.have` (since, grammatically, they 
do not replace a constituent with a differently typed one)?  Is grammar at one scale 
just busywork for semantics at a higher scale?  There is no apparent pattern in 
those concepts which are conveyed by single words and/or which by phrases.  
A `i.member of Parliament` is also a `i.Parliamentarian`/, and the purpose of the former 
phrase appears to be producing indirectly, or by evocation or assembly, the same concept as the 
word %-- the same concept `i.also avaible as` the word.  
There are well-trodden, conventionalized phrases with lexical stability akin to words; 
and innovative combinatorial exploits affording new shades of 
meaning betwixt the concepts baked into a lexicon; but in both cases a phrase 
seems like a pseudo-word, its inner structure preparing a conceptual denouement and 
then passed over.  For example, there is no English word specifically designating 
`i.Syrian` refugees (unlike, say, how `i.`emigres;` came to mean French 
aristocrats fleeing the First Republic); but the phrase 
itself serves as the concept's proxy.   
An adjective applied to a noun produces a new noun, but one with 
a precision not available otherwise 
in the vocabulary.  On this interpretation, the adjectival role is more 
semantic than morphological. 
`p`

`p.
I think the reality is more complex, however, because words within phrases 
still maintain some autonomy in terms of how they affect other phrases or other parts 
of their sentence (and beyond).  Consider:

`sentence-examples.
`sentence-example.Many students complained.`
`sentence-example.Student after student complained.`
`sentence-examples`

Both `q.many students` and `q.student after student` would appear to be a construction 
for pluralizing `q.student` (suggesting not just a numerical plural, but a 
relatively large number); in other words, to effect an identical fashion of 
`NtoN; mapping.  Any difference among them may be just shades of emphasis (from a cognitive 
perspective, the second seems to imply a temporal unfolding more then the 
former, but I'll discuss that aspect below).  On this reading, both phrases 
play analogous roles, and indeed, given a variation like: 

`sentence-examples.
`sentence-example.Many students (and their parents) complained.`
`sentence-examples`

we can similarly apply: 

`sentence-examples.
`sentence-example.Student after student (and their parents) complained.`
`sentence-examples`

But I also find these variants acceptable:

`sentence-examples.
`sentence-example.Student after student (and his parents) complained.`
`sentence-example.Student after student (and her parents) complained.`
`sentence-examples`

However the gender-specific (or non-specific) pronouns are read (which may depend 
on context: is this school co-ed; is the speaker deliberately using feminine-as-neutral, 
which is rather politically correct in modern academic discourse), the `i.singular` 
pronouns works with the apparently plural phrase (compare Langacker's analyses of 
sentences like `q.Three times, [students/a student] asked an interesting question`/).`footnote.
For example, \cite[pp. 119 and 128]{Langacker},  
discussed by \cite[p. 189]{LineBrandt}, and \cite[p. 9]{EstherPascual}.  
`footnote`  I opine that 
this shows how the constituent words of the apparent `NP; retain some autonomy, and 
can enter into inter-word and phrasal structures with other words outside their 
immediate phrase-context.  This does not foreclose a `q.functional` (`NtoN;) reading 
of phrase structure, but it cautions against oversimplification.  In particular, 
it cautions against reading `q.application`/, in the sense that (say) an adjective 
is like a `i.function` applied to a noun, to yield a different noun (something playing 
a noun's conceptual role) %-- like `i.Syrian refugee` from `i.refugee` %-- 
too hastily as a purely semantic transformation 
within a space of denotable concepts %-- `i.such that` the new concept wholly replaces the 
contained parts, which then cease to have further linguistic role and effect.  
Instead, applicative structures represent shifts or evolutions in 
mental construal, which proceed in stages as conversants form 
cognitive models of each others' discourse.  Even if phrase structure 
sets landmarks in this unfolding, phrases do not wholly subsume their 
constituents; the parts within phrases do not `q.vanish` on the higher scale, 
but remain latent and may be `q.hooked` by other, overlapping phrases.
`p`

`p.
Consider the effect of `q.Many students complained`/.  Propositionally, this appears 
to say essentially that `i.students` complained; but, on hermeneutic charity, the 
speaker had `i.some` reason to say `q.many`/.  The familiar analysis is that 
`q.many` suggests relative size; but this 
is only half the story.  If the speaker chose merely `i.students complained`/, we would hear an assertion 
that more than one student did, but we would also understand that there were several 
occasions when complaints happened (we might have a more detailed picture in 
context, if we know what they're complaining about).  Adding `q.many` does not just 
imply `q.more` students, but suggests a mental shift away from the particular episodes 
(the more events there are, the more labor is involved in discoursing about each one).  
In the other direction, saying `i.a student complained` is not just 
asserting how at least one student did so, but 
apparently reports one specific occasion (which perhaps the speaker wishes to 
elaborate on).  In other words, we cannot really capture the singular/plural semantics, 
or different varieties of plural, just by looking at the relative size of implied 
sets; we need to track how representations of singleness or multitude imply 
temporal and event-situational details.  So `i.a student complained` focuses not 
on the numeric count of one, but on a singular event (unlike 
`q.`i.only one` student complained`/); `i.students complained` focuses not on the 
plural measure of students involved, but on the fact that a certain type 
of event happened several times.  `i.Many students complained` 
focuses not on sheer number (unlike `i.a large number of students complained`/), 
but rather on the implication that complaints were widespread enough to represent 
a significant sample, perhaps a majority sentiment, among the student body.  
The semantics of the former two forms seems to focus attention 
on the `i.events` of complaining, while the `i.many students` construction seems 
to focus more on their suggesting a prevailing attitude.  `q.Students complained` 
seems to single out each event as distinct, even though there are several of 
them; whereas `i.Many students complained` seems to construe the 
events as each resembling the other, to the point where they partly 
lose their individuality and seem to run together.  `q.Isolated events`/, 
in the English idiom, are those which are atypical; as we cognitively 
shift from the events as discrete to recurring patterns, they become 
suggestive of a larger state of affairs.  By implication, if many students 
complained, many other students may be unhappy; the extent of students' 
unrest is no longer measurable by the multiplicity of the complaining-events.  
`p`

`p.
Against this backdrop, `i.Student after student complained` captures both dimensions, 
implying both a widespread unrest among the student body and also 
temporal recurrence of complainings (Figure ~`ref<fig:ESA>; is an example of how 
the sentence could be annotated, for sake of discussion).`input<figure.tex>;  The `q.Student after student` formation, 
specifically, has actually been used to critique head/dependent contrast as an 
analytic tool for phrase structure, apparently on the assumption that there is 
no obvious `q.head` in the phrase.  I disagree with that: I find a clear 
`AfterNSingAndNSingToNPl; (using `NSing; and `NPl; to mean singular 
and count-plural nouns, respectively), with the special case that the `q.argument` to 
`i.after` is repeated in both positions, suggesting an unusual degree of repetition, 
something frustratingly recurrent: `i.He went on and on`/; `i.Car after car passed 
us by`/; `i.Time after time I got turned down`/.  But while I have no problem 
treating these constructions as idiomatic plurals, I also contend (on the 
premise of phrase-overlap) that the dependent constituents in the `BlankAfterBlank; 
construction can be hooked to other phrases as well (which is why 
`q.and [their/his/her] parents` can also be singular, in this case).  I dwell on 
this example because it shows how type/functional accounts of phrase structure 
can be useful even if we treat phrases more as frames which overlay linguistic 
structure, not as rigid compositional isolates.  Each `q.students` variation uses 
morphology to nudge cognitive attention in one direction or another, toward events or the 
degree to which events are representative of some global property (here of 
a student body), or both.  The `NSingToNPl; transformation is not `i.the` 
morphosyntactic meaning, but instead the skeleton on which the full meaning 
(via cognitive schema) is designed, its hints solicited.
`p`

`p.
If this analysis has merit, it suggests that a `CAG; 
approach to phrases like `i.many students` or `i.student after student` 
(singular-to-plural or plural-to-plural mappings) should be understood not just 
as functions among Part of Speech types but as adding cognitive shading, foregrounding 
or backgrounding cognitive elements like events or typicality in some context.  
In other words, `i.many students` is type-theoretically `NtoN; but, in more detail, 
adds a kind of cognitive rider attached to the mapping which focuses cognition 
in the subsequent discourse onto events (their recurrence and temporal distribution); 
similarly `q.student after student` has a `q.rider` suggesting more of a temporal 
unfolding.  The second form implies not only that many students complained, but that 
the events of these complainings were spread out over some stretch of time.  
Each such functional application (mappings between `POS; understood as linguistic types) 
produces not only a resulting `POS; `q.type`/, but also a reconfiguration of cognitive 
attitudes toward the relevant situation and context.
`p`

`p.
Can formal type theory capture these cognitive details?  Certainly 
linguistics (not to mention programming languages) are not restricted to a 
`q.pure` functional type theory, which models `i.only` functions that produce a value 
when presented with other values; the more appropriate semantic formalisms involve 
`q.functions with side effects`/, which can end up modifying the values they are given, or 
causing their reinterpretation.  In a purely formal setting, this aspect 
of functionality %-- functional behaviors and kinds of 
organization %-- can be modeled via `i.capabilities` 
(`q.Capability-oriented` programming; `cite<Saghafi>;); and/or 
theories of functions as `q.processes` within `q.process algebras`/.
In this perspective, a `i.function` is like a miniature computer program 
which avails itself of certain `i.channels` to communicate with other such programs, 
and acquires `i.capabilities` relative to values which are provided through 
these channels.  Some values are `q.read-only`/, others may be `q.write-only` 
(a function may be charged with creating an initial value, for something which 
therefore does not have a meaningful value beforehand and is is not eligible 
for reading; or, in other examples, the function may be prevented from reading 
values for security reasons); still others `q.read/write`/.  A function may `i.always` or 
only `i.sometimes` read from and/or write upon a value.    
Functions may alter channels either by 
creating entirely new values, or by modifying pre-existing ones.  Computation 
is then a complex space of (often concurrent) process `q.capsules`/, whose rules of 
interaction are governed by formalisms like the 
`piCalculus; `cite<Allam>;, `cite<Toninho>;.
`p`

`p.
One consequence of this variability is that the classical type-theoretic 
understanding of functions %-- where function types map between pairs 
of other types %-- needs to be extended according to how functions affect their 
arguments.  Functional signatures should encompass not only parameter types 
but capabilities exercised on each argument (read/write/both, 
`i.modify` and/or `i.reconstruct` %-- the more complex a data structure, 
the more likely a modification must 
alter just one part, which may or may not be allowed as a form of access). 
Applicative structures also have multiple feasible interpretations: 
`q.`FeqMtimesA;` could express a general formula (maybe `q.force is mass times acceleration`/), 
as a posited law or rule; or, trigger an immediate calculation of $F$ from $M$ and $A$; 
or be a recipe attached to $f$, keeping reference to known $M$ and $A$, 
but invoked only if and when $f$ itself is needed 
(so-called `q.lazy evaluation`/).`footnote.  
This last point has analogs in natural language.  If I say `q.Let's meet an hour after 
the conference ends`/, I could be understood %-- if we all know that, say, 
the conference will end at 3  %-- as stating a desire to meet at 4, but 
in such a way as to motivate this choice; or perhaps I do not know when the end time is scheduled, but I expect 
someone else does, so I intend to fix the time during the subsequent conversation; 
or maybe the end time will be scheduled down the road, and our meeting will be 
fixed then according to the `q.one hour later` formula.  A final possibility is that I 
want to meet one hour after the conference actually ends, regardless of printed 
schedule; in that case the actual meeting time will not 
be confirmed until the conference ends `i.de facto`/.  `q.When the conference ends` 
can therefore name different possible moments in time %-- when 
it is `i.scheduled` to end (which may indeed change, such that the phrase refers 
`i.de dicto` to different times at different times, so to speak), as well as when it really 
`i.does` end.  If the end is scheduled for 3, but a 
revision changes that to 4, does my original sentence imply that our follow-up meeting 
be rescheduled for 5?  If it is supposed to end at 3, but goes on to 3:30, should we 
meet at 4, or at 4:30?
`footnote`  The sequence of instructions as written in 
source code does not always align to ordering in when (or even whether) they should be performed.  
All told, source code, while rigidly formal, has a richer, more variegated semantics than 
logico-mathematic expressions.  It is not unreasonable to speculate that programming language 
semantics is therefore intermediary between rigorous but rather reductionistic 
mathematical type theory, and Natural Language type-theoretic grammar.      
`p`

`p.
Returning, then, to the question of type-theoretic approaches to phrase structure, 
this expanded notion of functional transformation allows systematic models 
to be applied to real-world morphosyntax, but it also breaks the `i.a priori` 
link between such systematic models and language computability.  `q.Pure` 
functions, with no side effects (apart from returning values), straightforwardly 
compose into algorithmic tableaux; but the behavior of computing systems 
where many functions run concurrently, with possible side-effects, is often 
non-computable via static analysis; such systems can only be understood by 
actually running them.  Even if a single function embodies a computable 
calculation, it may be part of a process space whose evolution through 
time is nondeterministic.  Functional side-effects, in themselves, do not 
`i.necessarily` compel nondeterminism; but such questions call for closer analysis, 
an inventory of how side-effects roll out in each context.
`p`

`p.
The situation is analogous in Natural Language.  I believe 
phrasal structure implies mutually-modifying juxtapositions of concepts whose full semantic effects 
are probably non-computable, for any practical notion of computation.  I will 
try to defend this claim in the conclusion.  Yet while doing so, 
notwithstanding, I do not abandon formal models.  Even if we believe in 
and practice a rigorous formalization of morphosyntactic structure, 
where the `i.pattern` of conceptual `q.side-effects` can be seen as 
unfolding in algorithmic ways, the cognitive `i.details` of these 
effects are too situational, and phenomenologically rich, for 
computability as ordinarily understood.  But the formal structure is 
not wholly irrelevant: to call up nuanced cognitive schema 
%-- or so I submit for consideration %-- may not be possible without 
algorithmically reproducible lexicosemantic and morphosyntactic triggers, 
at least modulo some approximation.  A (perhaps non-computable) space 
of cognitive schema may be projected onto a (perhaps computable) 
set of affiliated morphological patterns, using function/type/applicative 
notation to catalog them.  For example, there may be a non-computable 
expanse of possible construals of pluralization; but any such construal, 
in context, is called into focus in conversants' minds by morphosyntactic 
invitations, by speakers' choices of, say, `mbox.`NSingToNPl;`/-pattern 
phrases.  The important balance is to take formalization as far as is reasonable 
without being seduced into logico-symbolic reductionism %-- a 
methodological pas de deux I will explore further in the next, last section. 
`p`

`p.
Any word or usage invites various facets to either 
emphasize or deemphasize, and these subsumed concepts or foci are 
latent in potential meanings, brought into linguistic space 
by Saussurian difference: `i.baked`/, not `i.made`/; `i.flew`/, not `i.traveled`/; 
`i.spill`/, not `i.pour`/.  
These under-currents of subsidiary concepts and foci are selectively hooked onto by 
morphosyntactic selection, so in analyzing phrase 
structure we also have to consider how using syntax 
which constructs a given structure also brings to the forefront certain 
nested concepts and construals, which are latent in word-sense options; 
in the topos of lexicosemantic possibilia.
`p`

`p.
So, any talk about `q.side effects` of morphosyntactic functions 
%-- mapping verb-space to adjective-space, noun-space to 
proposition-space, singularity to plurality, and so forth %-- should consider 
a type-theoretic gloss like `NtoN; as sketching just the motivating 
scaffold around an act of cognitive refocusing.  The interesting semantics 
lies with `i.how` a sense crosses over, in conversants' minds, 
to some other sense or concept, wherein other aspects are foregrounded 
%-- for example, within temporal event plurality: multiplicity as 
frequency, or episodic distribution relative to some time span; 
or suggesting something that is typical 
or predominant; or relative count against some other 
totality %-- each such refocusing triggered by a phrasal construction 
of the form `NtoNpl; or `mbox.`NpltoNpl;`/.  
Or we can map singulars, or count plurals, to mass nouns, and vice-versa (`i.shrubs` become `i.foliage`/; 
`i.water` becomes `i.a glass of water`/).   
The plural and the singular are a coarse-grained semantic that has not yet arrived as `i.meaning`/.  
Conceptual spaces guide attention to classes and properties, defining a path of ascending 
precision as speakers add descriptive detail; 
cognitive construals negotiate relations between different kinds 
of aggregates/individuals; individuality, aggregation and multiplicity as phenomena and 
disposition.  These construals are practical and embodied, `i.and` 
phenomenological %-- they direct attention (`i.qua` transcendental universal of 
mentality, if we like), to and fro, but in the course of intersubjective and 
goal-driven practical action (and in that sense particular, world-bound, historicized).  
`i.Student after student came out against the proposal`/.  
To `i.come out`/, for/against, lies in the semantic frame of attitude and expression 
(it requires a mental agent, for example), but its reception 
carries a trace of spatial form: to come out `i.to` a public place, to 
go on record with an opinion (a similar dynamic applies to the idiomatic 
`q.come out` to mean, for someone gay or lesbian, `q.come out of the closet`/, 
where the spatial figure is explicit but metaphorical).  Usually
`q.come out [for/against]`/, in the context of a policy or idea, is similarly
metaphorical.  But the concrete spatial interpretation remains latent, as a kind
of residue on even this abstract rendition, and there remains a chance that this
undercurrent will actually figure in conversants' mutual understanding %-- if 
there were not just columns being written and opinions voiced but demonstrations
on the quad.  The spatial undercurrent is poised to emerge
as more literal, should the context warrant.  However literally or metaphorically 
the `q.space` of the cognitive `q.coming out` is
understood, however explicit or latent its cogitative figuration, 
is not something internal to the language; it is a potentiality which
will present in different ways in different circumstances.  This is not to say that
it is something apart from linguistic meaning, but it shows how linguistic meaning
lies neither in abstract structure alone, nor contextual pragmatics, but in their cross-reference.   
`p`

`p.
Given these considerations, I propose a `q.Cognitive State Semantics` 
%-- understanding phrase structure in terms of (or analogous to) functional effects 
(like `cite<ShanThesis>;), but cognitive: word and syntax choice effectually 
steering cognitive appraisals of jointly experienced situations 
in specific directions.  Cognitive State Semantics also has formal implications: 
the inner structuration of data `q.spaces`/,  
including unknown and undefined values, and including (side-effects-bearing) function types, 
can be understood as dynamic `i.states of knowledge` and their changes, grounding datatype semantics in human 
use/interactions.`footnote.
While beyond the scope of this paper, these ideas have 
been applied in real-world settings, e.g., for code analysis and generation, 
targeting languages like `Lisp; and `Cpp; as well as special-purpose programming, query, and markup dialects.  
The motivating principle has been that, instead of resting programming language semantics on abstract, algebraic 
spaces, this semantics should emerge from types' inner organization, insofar as they in turn are designed to 
human knowledge and communication practices %-- especially at the application level, concerning 
to model external-world objects (or external world-objects).  `q.Inner Organization` means  
patterns of both extensional and intensional variation, as these evince forms characteristic 
of Conceptual Spaces.  Foregrounding this conceptuality  
allows testing and interface declarations to be foregrounded in code, rather than 
parceled off to test suites, documentation, and other mid-stream development assets.
`footnote`
Linguistically, the `q.effects` of language `q.functions` are 
mutations/modifications in cognitive state, respondant to concrete 
or abstract scenarios which are topics of dialog.  Sometimes, effects may  
tolerate mathematical analysis; but such analytical thematics tend to peter out into the 
ambient, chaotic worldliness of human consciousness. 
`p`
