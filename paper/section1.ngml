
`section.Varieties of Hypergraphs`
`p.
Any notion of hypergraphs contrasts with an 
underlying graph model, such that some element treated as 
singular or unstructured in regular graphs becomes a multiplicity 
or compound structure in the hypergraph.  So for example, an 
edge generalizes to a hyperedge with more than two incident 
nodes (which means, for directed graphs, more than 
one source and/or target node).  Likewise, nodes might generalize 
to complex structures containing other nodes (including, 
potentially, nested graphs).  The `q.elements` of a graph 
are nodes and edges, but also (for labeled/weighted 
and/or directed graphs) things like labels, weights 
(such as probability metrics associated with edges), and directions 
(in the distinction between incoming and outgoing edges incident to any node).  
Potentially, any of these elements can be transformed 
from a unit to a plural structure, a process 
I will call `i.diversification`/.  That is, 
a hypergraph emerges from a graph by `q.diversifying` 
some elements, rendering as multiplicities what 
had previously been a single entity %-- nodes become node-sets, edges 
become grouped into larger aggregates, labels generalize to 
complex structures (which I will call `q.annotations`/), 
etc.  Different avenues of diversification give 
rise to different varieties of hypergraphs, as 
I will review in the next several paragraphs.
`p`

`p.
`description,

\item[Hyperedges]  Arguably the most common model of 
hypergraphs involves generalizing edges to hyperedges, 
each of which (potentially) connect more than two nodes.  
For directed graphs,  
directed hyperedges have a `q.source` node-set and a `q.target` node-set, 
either of which can (potentially) have more than one node.  
Note that this is actually a form of node-diversification 
%-- there is still (in this genre of hypergraph) just one 
edge at a time, but its incident node set (or source and 
target node-sets) are sets and not single nodes.  Another way 
of looking at directed hyperedges is to see source and target 
node-sets as integral complex parts, or `q.hypernodes`/.  
So a (directed) hypergraph with hyperedges can also 
be seen as generalizing ordinary graphs by replacing 
nodes with hypernodes (such that one hypernode 
spans a `i.set` of `q.normal` nodes).
 
\item[Recursive Graphs]  Whereas hyperedges embody a relatively 
simple node-diversification %-- nodes replaced by node-sets 
%-- so-called `q.recursive` graphs allow compound nodes (hypernodes) 
to contain entire nested graphs.  Edges in this case can still 
connect two hypernodes as in ordinary graphs, but the 
hypernodes internally contain other graphs, 
with their own (on another `q.level`/) nodes and edges.
 
\item[Link Grammar]   Since `i.labeled` 
graphs are an important model for computational models, 
we can also consider generalizations of labels to be 
compound structures rather than numeric or string labels 
(or, as in the Semantic Web, `q.predicate` terms,  
drawn from an Ontology, in `q.Subject-Predicate-Object` 
triples).  Compound labels (which I will generically call 
double- or multiple-annotations) are encountered 
in several different branches of mathematics and other fields.  
\vspace*{.3em}\\\hspace*{3em}
In particular, compound annotations can represent the 
rules, justifications, or `q.compatibility` which allows 
two nodes to be connected.   In this case the annotation 
may contain information about both incident nodes.  
This general phenomenon (I will mention further examples 
below) can be called a `q.diversification` 
on `i.labels`/, transforming from labels as single units 
to labels as multi-part records.

\item[Hypergraph Categories]  Directed hyperedges have source- 
and target-`i.sets` of nodes (possibly ordered).  Allowing 
these sets to be `i.empty` yields structures similar to 
hypergraph categories in recent mathematical treatments, such 
as `cite<BrendanFong>;, `cite<AleksKissinger>;.  Hypergraphs 
in this characterization might be used to study software applications 
and real-time monitoring systems.  Hyperedges would then 
mark information flows between different sites `i.inside` the 
system.  A directed hyperedge `i.without` a source node-sets then 
models information `i.entering` the system `i.ab initio`/.  
Likewise hyperedges without target node-sets could model 
empirical effects produced by the system, which from one 
perspective embodies information `q.leaving` the system.
\vspace*{.3em}\\\hspace*{3em}
Analogous models can be realized by, in lieu of 
hyperedges `i.without` source or target node-sets at all, 
designating special hypernodes representing empty 
node-sets; or hypernodes providing greater detail about 
origin- or destination-points for paths modeling 
information flows.  In software and some CyberPhysical 
systems, information `q.enters` the system via 
`q.events` %-- that is, `i.events` are introduced as a 
primitive concept alongside `i.procedures`/, though 
events themselves are not `q.implemented` (they have no 
`q.body`/).  While procedures call other procedures, 
events `i.trigger` calls via event-to-procedure 
`i.connections`/.   
Events which are not generated by components `i.in` the 
system then correspond to hyperedges without source-nodes, 
but the situation can be more precisely modeled via a 
special class of event hypernodes (analogous to 
events, as a distinct signature-bearing element from 
procedures, in event-driven programming; 
cf. `cite<JenniferPaykin>;, 
`cite<PaykinKrishnaswami>;, `cite<WolfgangJeltsch>;). 


\item[Edges Incident to Edges]  A further generalization 
allows edges to `q.point at` other edges 
\cite[p. 10]{BalintMolnar}; \cite[p. 13]{BenGoertzel}.
The rationale for concordant constructions is that 
an edge %-- qua relation between two or more 
components %-- is itself a fact, datapoint, or 
assertion, and as such can be on some perspectives a 
singular element in a space of information.  
The Semantic Web, for example, includes `q.reified` 
edges (Subject/Predicate/Object triples).  
Reification permits properties to be stated about edges, 
such as provenance data (who asserts the edge and on 
what evidence) and context (the assertion is believed true 
at a specific time or in a given context).  
It is plausible then to allow reified edges 
to be treated as nodes incident to other edges.  As 
with hyperedges possessing empty source or target 
sets, the associated paradigm can be interpreted through 
a special class of hypernode: we can certainly 
consider nodes which refer to edges (perhaps via the 
latter's label or annotation).  Such `q.referring` 
is not necessarily an explicit further edge in graphs 
but could instea be `q.semantic` %-- that is, an edge being the 
`q.value` associated with a node (or likewise  
one value in a multi-element hypernode).

\item[Channels]   Hyperedges, which connect multiple 
nodes, are still generally seen as single edges 
(in contrast to multigraphs which allow multiple 
edges between two nodes).  Analogous to the grouping 
of nodes into hypernodes, we can also consider structures 
where several different edges are unified into a larger 
totality, which I will call a `i.channel`/.  
In the canonical case, a directed graph can group 
edges into composites (according to more fine-grained criteria 
than just distinguishing incoming and outgoing edges) which share a 
source or target node.  The set of incoming and/or outgoing  edges 
to each node may be partitioned into distinct 
`q.channels`/, so that at one scale of consideration the network 
structure can be analyzed via channels rather than via 
single edges (this shows why channels mark edge `i.diversification` 
as well as edge `i.aggregation`/, because the conceptual role 
of edges is potentially replaced by channels, which are composed 
of numerous edges).
\vspace*{.3em}\\\hspace*{3em}
As a concrete case, 
consider graphs used to model Object-Oriented programming 
languages, where a single node can represent a 
single function call.  The incoming edges are then 
`q.input parameters`/, and outgoing edges are procedural 
results or `q.outputs`/.  In the Object-Oriented paradigm, however, 
input parameters are organized into two groups: in addition 
to any number of `q.conventional` arguments, there is 
a single `this; or `self; object which has a distinct  semantic 
status (`visavis; name resolution, function visibility, and 
polymorphism).  This calls, under the graph model, for splitting 
incoming edges into two `q.channels`/, one representing regular 
parameters and a separate channel for the distinguished or 
`q.receiver` object-value.
`description`
`p`

`p.
In each of these formulations, what makes a graph `q.hyper` is the presence of 
supplemental information `q.attached` to parts of an underlying (potentially 
labeled, directed) 
graph.  For a concrete example, consider a case from linguistics %-- specifically, 
morphosyntactic agreement 
between grammatically linked words, which involves details 
matched between both `q.ends` of a word-to-word `q.link` 
(part-of-speech, plural/singular, gender, case/declension, 
etc.).  According to the theory of Link Grammar, 
words are associated with `q.connectors` (a related useful terminology, 
derived more in a Cognitive-Linguistic context, holds that 
words carry `q.expectations` which must be matched by other words they 
could connect to).`footnote.
Link Grammar proper was developed by Davy Temperley and Daniel Sleator 
`cite<TemperleySleator>;, `cite<GoertzelPLN>;, and computer 
scientists such as Kenneth Holmqvist and Matt Selway have adopted 
concepts from Link Grammar as part of projects formalizing 
Cognitive Linguistics in the tradition associated (notably) with 
Ronald Langacker `cite<HolmqvistDiss>;, `cite<MattSelway>;  
The OpenCog system is an example of Link Grammar integrated with 
hypergraphs concerned with data models and procedural 
execution, embodied in the AtomSpace data management component 
`cite<GoertzelEtAl>;, `cite<RuitingLian>;, \cite[pp. 55ff]{GoertzelP2}.  
`footnote`  The word `i.many`/, for instance, as in `i.many dogs`/, 
carries an implicit expectation to be paired with a plural noun.  The actual 
syntactic connection %-- as would be embodied by a graph-edge when a graph 
formation is employed to model parse structures %-- therefore depends on 
both the expectations on one word in a pair (whichever acts as a modifier, 
like `i.many`/) and the `q.lexicomorphic` details of its `q.partner` 
(`q.dog`/, as a lexical item, being a noun, and `i.dogs` being 
in plural form).
`p`

`p.
In Link Grammar terminology, both the expectations on 
one word and the lexical and morphological state of a second are called 
`q.connectors`/; a proper linkage between two words is then a `i.connection`/.  
For each connection there is accordingly two sets of relevant information, 
which might be regarded as a generalization on edge-labeling wherein edges 
could have two or more labels.  Furthermore, the assertion of multi-part annotations 
on edges permits edges themselves to be grouped and categorized: aside from several 
dozen recognized link varieties between words (which can be treated as conventional 
edge-labels drawn from a taxonomy, consistent with ordinary labeled graphs), 
edge-annotations in this framework mark patterns of semantic and syntactic agreement 
in force between word pairs (not just foundational grammatic matching, like 
gender and number %-- singular/plural %-- but more nuanced compatibility at the 
boundary between syntax and semantics, such as the stipulation that a noun in a 
locative position must have some semantic interpretation as a place or 
destination).  Insofar as these agreement-patterns carry over to other word-pairs, 
annotations mark linguistic criteria that tie together multiple edges 
in the guise of signals that a specific parse-graph (out of the space 
of possible graphs that could be formed from a sentence's word set) is correct.
`p`


`p.
Ordinary directed graphs 
(not necessarily hypergraphs) already have some sense of grouping edges together, 
given that incoming and outgoing edges are distinguished; 
but this indirect association between edges does not 
internally yield a concordant grouping of the nodes 
at the sources of edges all pointing to one target node 
(or analogously the targets of one source node).  
In the theory of 
hypergraph `i.categories`/, hypernodes come into play insofar as representation 
calls for the nodes `q.across` (i.e., at the other end of) 
incoming/outgoing edges to be pulled together.   
We distinguish an `i.incoming node-set` from an `i.outgoing node-set`/; 
then we might treat these sets as integral `q.bodies` of inputs 
(respectively, outputs):   
`cquote,
The term hypergraph category was introduced recently ... in reference
to the fact that these special commutative Frobenius monoids provide precisely the
structure required for their string diagrams to be directed graphs with `sq.hyperedges`/:
edges connecting any number of inputs to any number of outputs. ... 
We then think of morphisms in a hypergraph category as hyperedges 
\cite[p. 13]{BrendanFongThesis}.
`cquote`  

For a general mapping of  
categories to graphs where edges represent morphisms, this represents a 
generalization on the notion of `i.edges` themselves.  Suppose morphisms are 
intended to model computational procedures in a general sense (say, as 
morphisms in an ambient program state).  Because procedures can have any 
number (even zero) of both inputs and outputs, this implies a generalization 
wherein directed edges can have zero, one, or multiple source (and respectively 
target) nodes.  A corresponding hypergraph form is one where hyperedges have 
source- and target- hypernodes, but each hypernode models variant-sized sets 
of further `q.inner` nodes (or `q.hyponodes`/); here the empty set can be 
a hypernode with no hyponodes.  Elsewhere, apparently an equivalent 
structure is called a `q.trivial system`/:

`cquote,
Monoidal categories admit an elegant and powerful graphical notation 
[wherein] an object $A$ is denoted by a wire [and] [a] 
morphism `fAB; is represented by a box.  The trivial system 
$I$ is the empty diagram.  Morphisms `uIA; and `vAI; 
... are referred to as `textbf.states` and `textbf.effects` 
\cite[p. 4]{InteractingConceptualSpaces}.
`cquote`

The system $I$ %-- which we can also see as a hypernode with an empty 
(hypo-)node set %-- may embody a procedure which has no internal 
algorithmic or calculational structure (at least relative to the 
domain of analysis where we might represent computer code).  In 
CyberPhysical Systems, a function which just produces a 
value (with no input and no intermediate computations) can also 
be called an `i.observation`/, perhaps a direct reading from a 
physical `i.sensor` (accordingly, as in the above excerpt, a `i.state`/).  
Dually, a procedure which performs no evident calculation and produces 
no output value, but has a CyberPhysical `i.effect`/, can be called an 
`q.actuation`/, potentially connected to a CyberPhysical `i.actuator` 
(an example of a sensor would be a thermostat, and an example of an 
actuator would be a device which can activate/deactivate a furnace 
and/or cooling system).
`p`

`p.
In these examples I have cited hypergraphs in a linguistic (Link Grammar) 
and a mathematical (hypergraph categories) context.  These 
share some parallels insofar as a core motivation is to generalize and add 
structure to edges, either freeing edges from limts on 
node-arity (even allowing edges to be `q.unattached`/), 
or supplying edges with structured (potentially multi-part) annotations.
`p`

`p.
A somewhat different conception of hypergraphs is found in database 
systems such as HypergraphDB.  Graphs in that context express what have 
been called `i.recursive` graphs, wherein a hypernode `q.contains` or 
`q.designates` its own graph.  The basic idea is that for each (hyper-)node we 
can associate a separate (sub-)graph.  This can actually work two 
ways, yielding a distinction between (I'll say) `i.nested` 
and `i.cross-referencing` graphs.  In a `i.cross-referencing` graph, 
subgraphs or other collections of graph elements (nodes, edges, and/or 
annotations) can be given unique identifiers or designations and, as 
a data point, associated with a separate node.  Consider a case where 
nodes refer to typed values from a general-purpose type system; insofar 
as subgraphs themselves may be represented as typed values, a node could 
reference a subgraph by analogy to any other value (textual, numeric, 
nominal/enumerative data, etc.).  Here the (hyper)node does not 
`q.contain` but `i.references` a subgraph; the added structure involves 
subgraphs themselves being incorporated into the universe of values 
which nodes may quantify over.  Conversely, `i.nested` hypergraphs 
model hypernodes which have other graphs `q.inside` them, thereby creating 
an ordering among nodes (we can talk of nodes at one level belonging 
to graphs which are contained in nodes at a higher level).  Such constructions 
may or may not allow edges across nodes at different levels. 
`p`

`p.
Note that nested hypergraphs can be seen as a special case of cross-referencing 
graphs, where each hypernode `nodeN; is given an index `ix;, 
with the restriction that when  `nodeN; designates (e.g., via 
its corresponding typed value) a subgraph `sg;, all of 
`sg;'s hypernodes have index `ixminusone;.  Cross-referencing 
graphs, in turn, can be seen as special cases of an overall 
space of hypergraphs wherein hypernodes are paired with 
typed values from some suitably expressive type system `tys;.  
If `tys; includes higher-order types %-- especially, lists and 
other `q.collections` types which become concrete types in 
conjunction with another type (as in `i.list` qua generic 
becomes the concrete type `i.list of integers`/), then 
hypernodes acquire aggregate structure in part by 
acquiring values whose types encompass multiple 
other values.  I will use the term `i.procedural` hypergraphs 
to discuss structures that model node diversification 
via mapping hypernodes to collections-types 
(with the possibility for hypernodes 
to `q.expand` or `q.contract` as values are inserted into or 
removed from the collection).
`p`

`p.
Cross-referencing also potentially introduces a variant derivation of 
hypergraphs which proceeds by accumulating graph elements (nodes, 
edges, and labels or annotations) into higher-scale posits, rather 
than defining inner structures on elements.  Specifically, as a 
complimentary operation to diversification, consider `q.aggregation` 
of graph elements: the option to take a set of (hyper)nodes, 
(hyper)edges, and/or annotations as a typed value which can then 
be assigned to a (hyper)node.  In such a manner, higher-level 
structures can be notated with respect to graphs, which is one 
way to model phenomena such as `i.contexts` %-- the kind of multi-scale 
patterns that are considered endemic to practical domains 
like the Semantic Web.  While it is informally acknowledged that 
a single-level interpretation of the Semantic Web is misleading 
%-- the Semantic Web is not an undifferentiated mesh of connections, but 
rather an aggregation of data from many sources, which implies the existence of 
localization, contextualization, and other `q.emergent` structure %-- 
there is no definitive protocol for actually representing this emergent 
structure.  This issue, in turn, is one of arguments 
for hypergraphs in lieu of ordinary graphs as general-purpose 
data representations. 
`p`

`p.
The multi-scale, contextualized nature of the Semantic Web also points toward 
a conceptual duality in `i.how` graphs represent data.  On the one hand, graph 
structures %-- especially in the case of the Semantic Web, which builds off of 
internet technology in general %-- represent `i.relationships` between points 
or structures of data in some sense; in familiar web terms, the relata linked 
by graph edges are often `q.resources`/, designated by unique web addresses.   
A more theoretical model might take the information `q.residing` at 
graph nodes as typed values.  But in either case a given node may stand in 
for an aggregate of information %-- a single web resources may contain a 
theoretically unlimited supply of data, and a typed value can be of a list 
or tuple type internally containing its own body of information.  
Consequently, the full stock of data embodied in a graph may not lie 
primarily in the graph structure itself, but rather distributed among 
its nodes (that is, among nodes' associated data). 
`p`  

`p.
Conversely, graph structures (with suitable semantic specifications) are  
also considered to be media for serializing arbitrary data structures, which 
implies representing all details, at all levels of hierarchical organization, 
via graph structures.  Insofar as nodes embody their own information spaces, 
such internal structuration must then be mapped to their own graphs, 
as part of a workflow to project arbitrary structured data onto a canonical 
format.  The theoretical corollary to this idea would be that node data 
(via associated typed values) has its own internal representation; 
that it is, every typed value has a corresponding graph structure 
that may be `q.contained` within a higher-scale node.  
`p`

`p.
Different varieties of hypergraph forms complicate this picture 
because the structuring elements of hypergraphs include 
aggregate data within nodes as well as the space of 
edges and incidence relations.  Given the structures I have referred to 
as `q.procedural` hypergraphs, nodes can encompass multiple
internal values so long as they have a suitably well-defined 
internal structure.  We can analyze these possibilities 
by defining, for each hypernode, an `q.interface` or list of 
operations available for updating hypernodes' associated values.  
Which operations are proper depends on a hypernode's type: 
hypernodes associated with a single unstructured value 
should have one basic update operation, while nodes with 
list-like types would have operations to insert (and remove) 
values at different positions.  In general, procedural 
hypergraphs should differentiate between `i.atomic` hypernodes 
with one associated value; `i.tuple` hypernodes with a 
fixed array of values (potentially of multiple types); 
and `i.collections` hypernodes encompassing lists of 
values subject to append/insert/remove actions 
(in which case inserted values' types should 
have a predictable pattern; 
consider key- and value-type alternation in 
associative arrays).
`p` 
   
`p.
Separate and apart from operations modifying hypernodes' values, there 
are also conventional graph operations %-- adding and removing 
nodes and edges.  In combination, the graph-oriented and node-oriented 
operations present a variegated interface for manipulating 
procedural hypergraphs.  Such an interface then serves as a rigorous 
characterization of the overall hypergraph model %-- the structuring 
elements expressed by enumerating graphs' transformation operations 
represent the particular features of each specific hypergraph 
variety.  In the case of procedural hypergraphs, many of these transformations 
are not graph-related per se but derive from hypernodes' collections or tuple 
types.  I contend that this is a useful property of procedural hypergraphs 
for reasons I alluded to in the introduction %-- hypergraphs (or at least the 
data represented with them) need to work in a variety of computational contexts.  
The relatively unstructured form of graph data is not always appropriate 
from one context to another; the list-of-values or value-tuple structures 
embodied as hypernode data may be more consistent with internal representations 
in database or language-runtime engines, for example.  Procedural hypergraphs 
are appropriately flexible in that some data is modeled at the graph level 
proper while other data is modeled as lists, tuples, and similar data structures 
within individual nodes.  
`p`

`p.
In many practical contexts graph structures are not implicitly used at all; 
the importance of Semantic Web-style representation is for intermediary 
structures, where information is routed among different environments 
(database, applications, serialization, and so forth).  Transformations 
between hypergraphs can be a central process in generic transformations 
between data structures proper to different contexts.  In effect, where 
there is a general need for data tranforms in routing between 
contexts %-- e.g., database to application runtime %-- we can hope to 
capture most of the relevant transform logic as specifically 
mappings between hypergraphs, with each hypergraph possessing a structure 
optimized for being initialized from one context (or for generating data 
used in another context).  This progression may involve restructuring 
wherein information modeled at the `q.inter-hypernode` level %-- 
which we can call `i.hypernode` data %-- tends to be migrated 
to the level `i.inside` hypernodes, which we can call `i.hyponode` data.  
In broad outline, hypergraph transforms can progress from relatively 
casual structures (with a preponderance of information expressed as 
`i.hypernode` data) to more constrained structures %-- mapping 
hypernode to hyponode data, i.e., mapping data from structures 
`i.between` hypernodes to those `i.within` hypernodes %-- where 
the hyponode data is regulated by hypernodes' types.
`p`

`p.
In this section I identified different additions through which graph 
structures generalize to hypergraphs; a general-purpose hypergraph 
engine would need to support each of these variations, which entails 
enabling the complete repository of transform-operations applicable to 
different hypergraph varieties.  This includes generalizing 
edges to hyperedges by `q.diversifying` nodes to encompass mutiple values; 
representing nodes' internal structure in terms of data structures 
such as lists, tuples, and nested graphs; and generalizing edge-labels 
to annotations which may have multiple parts.  I have not yet discussed 
the possibility of grouping hyperedges into higher-level structures 
(what I called `q.channels`/), but I will return to 
those details in a later section.  
`p`

`p.
For the remainder of this paper, I will attend especially to 
hypergraphs modeling (and subsequently executing) computer code, 
because constructing a working runtime engine which runs source 
code, via hypergraph intermediaries, demonstrates a variety of concepts 
applicable to hypergraphs in general.  I will discuss a workflow 
connecting parsers, a runtime `q.virtual machine`/, intermediate representations 
for hypergraphs, and inter-graph transforms.  Collectively 
this workflow implicates many of the capabilities which would be 
requisite for a general-purpose hypergraph software ecosystem.  
`p`

`p.
Interested readers who would like to observe a concrete 
unfolding of this workflow are invited to download the 
code base accompanying this paper, where readers can examine 
the operations of parsers and code generators working with 
a built-in, general-purpose hypergraph library.  The demo  
is fully integrated with Qt Creator, a C++ Integrated Development 
Environment, and has no further dependencies (assuming users 
have a working Qt and C++ compiler; Qt is a popular C++ application-development 
framework).  The dataset includes instructions for 
experimenting with the hypergraph library via Qt Creator and examining 
runtime structures by executing demonstration scripts in Debug mode. 
`p`


