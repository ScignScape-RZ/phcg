
`section.Truth-Theoretic Semantics and Enaction`
`p.
Corrolary to the idea that roles often determine
concepts, is the recognition that
we tend to logically evaluate situations in
functional terms, through the lens of what
we (or any of our peers) are `i.doing`/.
Suppose my friend says this, before and after:

`sentenceList,
`sentenceItem; \label{itm:put} Can you put some almond milk in my coffee?
`sentenceItem; \label{itm:after} Is there milk in this coffee?
`sentenceList`

Between (\ref{itm:put}) and (\ref{itm:after}) I do put almond milk
in his coffee and affirm `q.yes` to (\ref{itm:after}).  I feel it
proper to read (\ref{itm:after})'s `q.milk` as really meaning
`q.almond milk`/, in light of (\ref{itm:put}).  Actually
I should be `i.less` inclined to say `q.yes`
if (maybe as a prank) someone had instead
put real (cow) milk in the coffee.  In responding
to his question I mentally substitute what
he almost certainly `i.meant` for how
(taken out of context) (\ref{itm:after}) would usually
be interpreted.  In this current
dialog, the `i.milk` concept not only
includes vegan milks, apparently, but
`i.excludes` actual milk.
`p`

`p.
It seems %-- on the evidence of cases like this one %--
as if when we are dealing with
illocutionary force we are obliged to subject
what we hear to extra interprtation, rather
than resting only within `q.literal` meanings
of sentences, conventionally understood.
This point is worth emphasizing because it complicates
our attempts to link illocution with propositional
content.  Suppose grandma asks me to close the
kitchen window.  Each of these are plausible and
basically polite responses:

`sentenceList,
`sentenceItem; It's not open, but there's still some
cold air coming through the cracks.
`sentenceItem; It's not open, but I closed the window in
the bedroom.
`sentenceItem; I can't %-- it's stuck.
`sentenceList`

In each case I have not fulfilled her request `visavis;
its literal meaning, but I `i.have` acted benevolently
in terms of conversational maxims.  Many linguists
seem to analyze hedges like `q.could you please`
as merely dressing over crude commands: we don't
want to come across as giving people orders, but
sometimes we do intend to ask pople to do specific
things.  As a result, we feel obliged to couch the
request in conversational gestures that signal
our awareness of how bald commands may lie outside
the conversational norms.  These ritualistic
`q.could you please`/-like gestures may have
metalinguistic content, but %-- so the theory
goes %-- they do not `i.semantically` alter
the speech-act's directive nature.
`p`

`p.
The problem with this analysis is that sometimes
directive and `q.inquisitive` dimensions can
overlap:

`sentenceList,
`sentenceItem; \label{itm:almond} Do you have almond milk?
`sentenceItem; Can you get MsNBC on your TV?
`sentenceItem; \label{itm:needcorkscrew} This isn't a screw-cap bottle: I need a corkscrew.
`sentenceList`

These `i.can` be read as bare directives, and would
be interpreted as such if the hearer believed the
speaker already knew that yes, he has almond milk, and yes,
he gets MsNBC.  In (\ref{itm:needcorkscrew}), if both parties
know there's one corkscrew in the house,
the statement implies a directive to fetch `i.that` corkscrew.
But, equally, (\ref{itm:almond})-(\ref{itm:needcorkscrew}) can `i.also` be read as bare
questions with no implicature: say, as fans of
almond milk and MsNBC endorsing those selections,
or pointing out that opening the bottle
will need `i.some` corkscrew.
And, meanwhile, (\ref{itm:almond})-(\ref{itm:needcorkscrew})
can `i.also` be read as a mixture of the
two, as if people expressed themselves like this:


`sentenceList,
`sentenceItem; I think the window is open, can you close it?
`sentenceItem; I see you have almond milk, can I have some?
`sentenceItem; If you get MsNBC, can you turn on Rachel Maddow?
`sentenceItem; If there is a corkscrew in the house, can you get it?
`sentenceList`

`p`

`p.
I think the mixed case is the most prototypical, and pure
directives or inquiries should be treated as degenerate
structures whre either directive or inquisitive content
has dropped out.  After all, even a dictatorial
command includes the implicit assumption that the order
both makes sense and is not impossible.  On
the other hand, we don't ask questions for no
reason: `q.do you have almond milk` may be a
suggestion rather than a request, but it still
carries an implicature (e.g., that the addressee
`i.should` get almond milk).
`p`

`p.
Ordinary requests carry the assumption that addressees
can follow through without undue inconvenience,
which includes a package of assumptions about both
what is currently the case and what is possible.
`q.Close the window` only has literal force if the
window is open.  So when making a request speakers
have to signal that they recognize the request involves
certain assumptions and are rational enough to
accept modifications of these assumptions in
lieu of literal compliance.  This is why
interrogative forms like `q.can you` or
`q.could you` are both semantically nontrivial
and metadiscursively polite: they leave open the
possibility of subsequent discourse framing the original
request just as a belief-assertion.  Developments
like `q.can you open the window` %-- `q.no, it's closed`
are not ruled out.  At the same time, interrogative forms
connote that the speaker assumes the addressees can
fulfill the request without great effort: an implicit
assumption is that they `i.can` and also `i.are
willing to` satisfy the directive.  This is an
assumption, not a presumption: the speaker
would seem like a bully if he acted as if he
gave no thought to his demands being too much
of an imposition %-- as if he were taking
the answer to `q.can you` quesions for granted.
This is another reason why requests
should be framed as questions.  So, in short,
`q.commands` are framed as questions because the speaker
literally does not know for sure whether the command is
possible; given this uncertainty a command `i.is` a question,
and the interrogative form is not just a non-semantic
exercise in politesse.
`p`

`p.
Sometimes the link between directives and
belief assertions is made explicit.  A common
pattern is to use `q.I believe that` as an
implicature analogous to interrogatives:

`sentenceList,
`sentenceItem; I believe you have a reservation for Jones?
`sentenceItem; I believe this is the customer service desk?
`sentenceItem; I believe we ordered a second basket of garlic bread?
`sentenceItem; I believe you can help me find computer
acessories in this section?
`sentenceList`

These speakers are indirectly signaling what they want
someone to do by openly stating the requisite
assumptions %-- `i.I believe you can` in place
of `i.can you?`/.  The implication is that
such assumptions translate clearly to a
subsequent course of action %-- the guest who
`i.does` have that reservation should be checked in;
the cashier who `i.can` help a customer find
accessories should do so.  But underlying these
performances is recognition that
illocutionary force is tied to background
assumptions, and conversants are reacting to
the propositional content of those assumptions
as well as the force itself.  If I `i.do` close the
window I am not only fulfilling
the request but also confirming that the window
`i.could` be closed (a piece of information
that may become relevant in the future).
`p`

`p.
In sum, when we engage pragmatically with other
language-users, we tend to do so coopratively,
sensitive to what they wish to achieve with
language as well as to the propositional
details of their discourse.  But this often means
that I have to interpret propositional
content in light of contexts and implicatures.
Note that both of these are possible:

`sentenceList,
`sentenceItem; Do you have any milk?
`sentenceItem; Yes, we have almond milk.
`sentenceItem; No, we have almond milk.
`sentenceList`

A request for milk in a vegan restaurant could plausibly be
interpreted as a request for a vegan milk-substitute.
So the concept `q.milk` in that context may actually be
interpreted as the concept `q.vegan milk`/.  As Luo
points out in [], particular concept-maps are
admissible as in force in specific situations even
if they deviate noticeably from typical usage
(Luo does not talk about concept `q.maps` but
about subtyping and various inter-type relations,
yielding a type-theory of situations I think
is relevant to Conceptual Role theories of situations).
In any case, responding to the force of speech-acts
compels me to treat them as not `i.wholly`
illocutionary %-- they are in part statements of
belief (like ordinary assertions).  One reason I need
to adopt an epistemic (and not just obligatory)
attitude to illocutionary acts is that I need to
clarify what meanings the speaker intends, which
depends on what roles she is assigning to
constituent concepts.
`p`

`p.
If a diner asks for milk in a vegan restaurant,
a waiter may plausbily infer that the customer
believes the restaurant `i.only has` vegan milk,
so there is no need to make that explicit; and/or
she assumes that everyone in the restaurant will hear
`q.milk` as `q.vegan milk`/.  In other words, the
waiter infers that `q.vegan milk` for her plays the
same role as `q.milk` for a non-vegan.  This inference
is not produced by any speech-act subtleties: a related
inference would be involved in

`sentenceList,
`sentenceItem; Is there milk in this coffee?
`sentenceItem; Yes, almond milk.
`sentenceList`

Part of reading propositional content is
syncing our conceptual schemas with our fellow
conversants.  The illocutionary
dimension of a request like `q.can I have some milk?`
makes this interpretation especially important,
because the addressee wants to make a good-faoth effort
to cooperate with the pragmatic intent of the
spech-act.  But cooperation requires the
cooperating parties' conceptual schemas to
be properly aligned.  I therefore have to
suspend the illocutionary force of a directive
temporarily and treat it as locutionary
statement of belief, interpret its apparent
conceptual underpinnings in that mode, and
then add the illocutionary force back in: if I
brought `i.real` milk to a vegan customer who
asked for `q.milk` I would be `i.un`/-cooprative.
`p`

`p.
The upshot is that conversational implicatures
help us contextualize the conceptual negotiations
that guarantee our grasping the correct
propositional contents, and vice-versa.  This means
that propositionality is woven throughout both
assertive and all other modes of language, but it
also means that propositional content can be
indecipherable without a detailed picture
of the current context (including illocutionary
content).  The proposional content of,
say, `q.there is milk in this coffee` has to be
judged sensitive to contexts like `q.milk`
meaning `q.vegan milk` %-- and this
propagates from a direct propositional
to any propositional attitudes which may
be directed towards it, including requsts like
`q.please put milk in this coffee`/.
`p`

`p.
Suppose the grandkids close grandma's bedroom window
when she asks them to close the kitchen window.
The propositional content at the core of grandma's
request is that the kitchen window be closed; the
content attached to it is an unstated belief that
this window is open.  Thus, the truth-conditions
satisfying her implicit understanding would be
that the kitchen window went from being open to being
closed.  As it happens, that window is already
closed.  So the truth-conditions that would satisfy
grandma's initial belief-state do not obtain %-- her
beliefs are false %-- but the truth conditions satisfying
her desired result `i.do` obtain.  The window
`i.is` closed.  Yet the grandkids should not thereby
assume that her request has been properly responded to;
it is more polite to guess at the motivation behind
the request, e.g., thay she felt a draft
of cold air.  In short, they should look outside
the truth conditions of her original
request taken literally, and `i.interpret`
her request, finding different content
with different truth-conditions that are both consistent
with fact and address whatever pragmatic goals
grandma had when making her request.  They might
infer her goal is to prevent an uncomfortable
draft, and so a reasonable `q.substitute content` is
the proposition that `i.some` window is open,
and they should close `i.that` one.
`p`

`p.
So the grandkids should reason as if translating
between these two implied meanings:

`sentenceList,
`sentenceItem; I believe the kitchen window
is open %-- please close it!
`sentenceItem; I believe some window
is open %-- please close it!
`sentenceList`

They have to revise the simplest reading of
the implicit propositional content of grandma's
`i.actual` request, because the actual request is
inconsistent with pertinent facts.  In short, they
feel obliged to explore propositional alternatives
so as to find an alternative, implicit request whose
propositional content `i.is` consistent with
fact and also meets the original request's illocutionary
force cooperatively.
`p`

`p.
In essence, we need to express a requester's desire as
itslf, in its totality, a specific propositional content,
thinking to ourselves (or even saying to others) things
like

`sentenceList,
`sentenceItem; Grandma wants us to close the window.
`sentenceItem; He wants a bottle opener.
`sentenceList`

But to respond politely we need to modify
the parse of their requests to capture the
`q.essential` content:

`sentenceList,
`sentenceItem; Grandma wants us to eliminate the cold draft.
`sentenceItem; He wants something to open that bottle.
`sentenceList`

We have to read outside the literal interpretation
of what they are saying.  This re-reading is something
that may be appropriate to do with respect to
other forms of speech also %-- sometimes
the true gist of what someone wants to communicate
is not stated directly:

`sentenceList,
`sentenceItem; I think you could do excellent work in
this class, and I think you are doing pretty well.
`sentenceItem; I am not going to talk about the refs because
I don't want to get fined.
`sentenceItem; If she wants to win the nomination she
needs to be as charismatic on the campaign trail as
she was during the debate.
`sentenceList`

But our conversational responsibilty to infer
some unstated content is especially pronounced
when we are rsponding to an explicit
request for something.
`p`

`shortdecoline;

`p.
Certainly, in any case, meanings are not literal.
But how then do we understand what people are saying?
Trying to formulate a not-entirely-haphazard
account of this process, we can spculate
that interpreting what someone is `q.really` saying
involves systematically mapping their apparent
concepts and references to some superimposed
inventory designed to mitigate false beliefs or
conceptual misalignments among language users in some
context.  That means, we are looking for mappings
like `i.milk` to `i.almond milk` in (\ref{itm:can}) from a
vegan restaurant, or `i.kitchen window` to
`i.bedroom window` in (\ref{itm:close}) if it is the latter
that is open:

`sentenceList,
`sentenceItem; \label{itm:can} Can I have some milk?
`sentenceItem; \label{itm:close} Can you close the kitchen window?
`sentenceList`

The point of these `q.mappings` is that they
preserve the possibility of
modeling the `i.original` propositional content
by identifying truth conditions
for that content to be satisfied.
`p`

`p.
A `i.literal` truth-condition model doesn't work in
cases like (\ref{itm:can}) and (\ref{itm:close}): the diner's request
is `i.not` satisfied if it is the case
that there is now (real) milk in her coffee, and
grandma's request is not necessarily satisfied if it is
the case that the kitchen window is closed.  The
proposition `q.the kitchen window is closed` only bears on
grandma's utterance insofar as she believes that
this window is open and causing a draft.  So if we want
to interpret the underlying locutionary content
of (\ref{itm:can}) and (\ref{itm:close}) truth-theoreticaly, we need to
map the literal concepts appearing
in these sentences to an appropriate translation,
a kind of `q.coordinate transformation` that
can map concepts onto others, like milk/almond milk
and kitchen window/bedroom window.
`p`

`p.
Simultaneous with propositional content, of
course, are attitudes: the difference between
asserting and wanting that the window is closed.
It is hard to deny that `i.some` propositional
content is involved with each linguistic expression,
because simply by being a structured mental activity
the effort to formulate sentences must be extended with
some purpose.  We say (and write) things to help make
something or other the case.  But there are several
challenges to disentangle the role that propositional
content actually plays in meaning.  One problem I
just considered is that the right propositional content
does not always come from `i.literal` meaning: the
vegan `i.doesn't` want real milk in her coffee.
The idea of `q.mapping` is one way to address this:
in place of `q.literal` meaning we can substitute
meanings under `q.coordinate` transforms, where
concepts transition from their literal designation
to their roles.  The vegan wants the product that
plays the `i.conceptual role` of `q.milk` in her
own frame of reference (at least in the context of,
say, dining, as opposed to a context like
checking whether her Staffy is lactating).
But there are two other concerns we should have
about propositional content, which
I will discuss to close out this section.
`p`

`spsubsectiontwoline.The Problem of Opaque Truth Conditions`
`p.
My analysis related to conceptual `q.transforms`
assumed that we can find, substituting for `i.literal`
propositional content, some `i.other`
(representation of a) proposition that fulfills a
speaker's unstated `q.real` meaning.  Sometimes
this makes sense: the proposition that the
`i.bedroom` window is closed can neatly,
if the facts warrant, play the role of the
proposition that `i.the kitchen window is closed`/.
But we can run the example differently: there
may be `i.no` window open, but instead a draft
caused by non-airtight windows (grandma might ask
us to put towels by the cracks).  Maybe there is
no draft at all (if grandma is cold, we can
fetch her a sweater).  Instead of a single
transform, we need a a system of potential transforms
that can adapt to the facts as we discover them.
Pragmatically, the underlying problem is
that `i.grandma is cold`/.  We can address this
%-- if we want to faithfully respond to her request,
playing the role of cooperative conversation
partners (and grandkids) %-- via a matrix
of logical possibilities:


`sentenceList,
`sentenceItem; If the kitchen window is closed,
we can see if other windows are open.
`sentenceItem; If no windows are open,
we can see if there is a draft through the window-cracks.
`sentenceItem; If there is no draft, we can
ask if she wants a sweater.
`sentenceList`

This is still a logical process: starting from an
acknowledged proposition (grandma is cold) we
entertain various other propositional possibilities,
trying to rationally determine what pragmas we
should enact to alter that case
(viz., to instead make true the proposition that
`i.grandma is warm`/).  Here we are not just testing
possibilities against fact, but strategically
acting to modify some facts in our environment.
`p`

`p.
The kind of reasoning involved here is not logical
reasoning per se: abstract logic does not tell us
to check the bedroom window if the kitchen window is closed,
or to check for gaps and cracks if all windows
are closed.  That is practical, domain-specific knowledge
about windows, air, weather, and houses.
But we are still deploying our practical
knowledge in logical ways.  There is a logical
structure underpinning grandma's request and
our response to it.  In sum: we (the grandkids)
are equipped with some practical knowledge
about houses and a faculty to logically utilize this
knowledge to solve the stated problem, reading
beyond the `i.explicit` form of grandma's discourse.
We use a combination of logic and background
knowledge to reinterpret the discourse as needed.
By making a request, grandma is not expressing
one attitude to one proposition, so much as
`i.initiating a process`/.  This is why it would
be impolite to simply do no more
if the kitchen window is closed: our conversational
responsibility is to enact a process trying to
redress grandma's discomfort, not to entertain the
truth of any one proposition.
`p`

`p.
For all that, there is still an overarching logical
structure here that language clearly marshals.  We read
past grandma's explicit request to infer what she is
`q.really saying` %-- e.g., `i.that she is cold` %-- but we
still regard her speech act in terms of its (now indirect)
propositional content.
But once we converge on the `q.language initiates
a process` model, we can find examples where the
logical scaffolding gets more tenuous.
Consider:

`sentenceList,
`sentenceItem; My colleague Ms. O'Shea would like to interview
Mr. Jones, who's an old friend of mine.  Can he take this call?
`sentenceItem; \label{itm:Jones} I'm sorry, this is his secretary.  Mr. Jones
is not available at the moment.
`sentenceList`

It sounds like Ms. O'Shea is trying to use personal
connections to score an interview with Mr. Jones.  Hence
her colleague initiates a process intended to
culminate in Ms. O'Shea getting on the telephone
with Mr. Jones.  But his secretary demurs with a
familiar phrase, deliberately formulated to
foment ambiguity: (\ref{itm:Jones}) could mean that Mr. Jones
is not in the office, or that he is in a meeting, or he is,
unwilling to talk, or even missing (like
the ex-governor consummating an affair in Argentina
while his aides thought he was hiking in Virginia).
Or:


`sentenceList,
`sentenceItem; Mr. Jones, were you present at a meeting where
the governer promised your employer
a contract in exchange for campaign contributions?
`sentenceItem; After consulting with my lawyers, I decline
to answer that question on the grounds that it
may incriminate me.
`sentenceList`

Here Mr. Jones neither confirms nor denies his
presence at a corrupt meeting.
`p`

`p.
As these examples intimate, the processes language
initiates do not always result in a meaningful
logical structure.  But this is not necessarily
a complete breakdown of language:


`sentenceList,
`sentenceItem; \label{itm:isJones} Is Jones there?
`sentenceItem; \label{itm:not} He is not available.
`sentenceList`

The speaker of (\ref{itm:not}) does not
provide any prima facie logical content: it neither affirms
nor denies Jones's presence.  Nonetheless that speaker
is a cooperative conversational partner
(even if they are not being very cooperative in real life):
(\ref{itm:not}) responds to the implicature in
(\ref{itm:isJones}) that what the
first speaker really wants is (for instance)
to interview Jones.
So the second speaker conducts what I called
a `q.transform` and maps `q.Jones is here` to
`q.Jones is willing to be interviewed`/.
Responding to this `q.transformed` question allows
(\ref{itm:not}) to be (at least) linguistically cooperative
while nonetheless avoiding a response at the
`i.logical` level to (\ref{itm:isJones}).  (\ref{itm:not}) obeys
conversational maxims but is still rather obtuse.
`p`

`p.
So one problem for theories that read meanings in terms
of logically structured content %-- something like, the
meaning of an (assertorial) sentence is what the world would be
like if the sentence were true %-- is that the actual
logical content supplied by some constructions
(like `q.Jones is not available`/) can be pretty
minimal %-- but these are still valid and
conversationally cooperative.  To be sure, this
content does not appear to be `i.completely`
empty: `q.Jones is not available` means the
conjunction of several possibilities (he cannot be found
or does not want to talk or etc.).
So (\ref{itm:not}) does seem to evoke some
disjunctive predicate.  But such does not mean
that this disjunctive predicate is the `i.meaning` of
(\ref{itm:not}).  It does not seem as if (\ref{itm:not})
when uttered by a bodyguard is intended first and foremost to
convey the disjunctive predicate.  Instead, the
bodyguard is responding to the implicature
in the original `q.Is Jones there?` query %-- the
speaker presumably does not merely want
to know Jones's location, but to see Jones.
Here people are acting out social roles, and just happen
to be using linguistic expressions to negotiate
what they are able and allowed to do.
`p`

`p.
Performing social roles %-- including through language %--
often involves incomplete information: possibly
the secretary or bodyguard themselves do not know
where Jones is or why he's not available.
We could argue that there is `i.enough` information to
still ground `i.some` propositional content.  But this
is merely saying that we can extract some propositional content from
what speakers are supposed to say as social acts, which seems
to make the content (in these kinds of cases)
logically derivative on the enactive/performative
meaning of the speech-acts, whereas a truth-theoretic
paradigm would need the derivational dependence
to run the other way.  By saying `q.Jones is unavailable`
the speaker is informing us that our own prior speech
act (asking to see or talk to him) cannot have
our desired effect %-- the process we initiated cannot be
completed, and we are being informed of that.  The
person saying `q.Jones is unavailable` is likewise
initiating a `i.new` process, one that counters our process
and, if we are polite and cooperative, will have its
own effect %-- the effect being that we do not insist on
seing Jones.  The goal of `q.Jones is unavailable` is to create
that effect, nudging our behavior in that direction.
Any `i.logic` here seems derivative on the practical initiatives.
`p`

`p.
And moreover this practicality is explicitly marked by how
the chosen verbiage is deliberately vague.  The declaration
`q.Jones is unavailable` does not `i.need` logical precision to
achieve its effect.  It needs `i.some` logical content, but it exploits a
kind of disconnect between logicical and practical/enactive
structure, a disconnect which allows `q.Jones is unavailable` to
be at once logically ambiguous and practically clear %--
in the implication that we should not try to see Jones.
I think this example has some structural
analogs to the grandma's window case: `i.there` we
play at logical substitutions to respond practically
to grandma's request in spirit rather than `i.de dicto`/.
`i.Here`  a secretary or bodyguard can engage in logical
substitution to formulate a linguistic performance
designed to be conversationally decisive
while conveying as little information as possible.  The logical
substitution in grandma's context `i.added` logical content by
trying alternatives for the window being closed; here,
the context allows a `i.diminution` in
logical content.  We can strip away logical detail from
our speech without diminishing the potency of
that speech to achieve affects.  And while the remaining residue
of logical content suggests that some basic logicality is still
essential to meaning, the fact that logical content can
be freely subtracted without altering practical effects
suggests that logic's relation to meaning is something
other than fully determinate: effect is partially autonomous from
logic, so a theory of effect would seem to be
partially autonomous from a theory of logic.
I can be logically vague without being
conversationally vague.   This evidently means that conversational
clarity is not identical to logical clarity.
`p`

`p.
This pattern of logical evasiveness might seem to be
endemic only to slippery human language, but analogous
examples can be found even in the strict milieu of
computer programming.  Computer
programming involves passing instructions around, and
that any one segment of code is typically dealing with
incomplete information, like the bodyguard who
does not know `i.why` Jones is unavailable.
Given such partiality, it is misleading
to assume that `i.instruction networks` are
conduits for logical content pe se.  My first
rsponsibility as a programmer, at any point in code,
is to call the right functions, depending on types, ranges,
values, and any contingent environmental factors relevant
to what the local code needs to do.  Therefore, insofar as
several functions might be candidates to call at any one
code-location %-- there are scenarios where one function
should be called, and others where a different one, etc.
%-- I have to ensure the correct one is called
in each scenario.  But, as I will argue,
the structures determining how this multiplicity
is resolved are not logical structures.  They have
formal (e.g., type theortic) aspects, but
these are not the `i.kinds` of formal aspects
that simply manifest a logical systm.
`p`

`p.
As a quick example, while implementing a function that compares
two lists, I may need to call different secondary functions in
different cases like `q.which list is longer?` or
`q.is either list empty?`/.  There are various program-flow
or type-theoretic models to rigorously describe this kind
of branching as a computational phenomenon.  But
these are not logical models, in the sense that
they can be fully specified in formal terms without
explicit appeals to formal logic machinery (substitution
axioms and so forth).  In short, `i.structured systems of
instruction-passing` are not `i.metaphysically`
speaking logics %-- even if one can actually
give them a logical model, which
then becomes a `i.reductive analysis` (like Chemistry
providing reductive analyses for Biology, which does
not thereby `i.metaphysically` become Chemistry).
`p`

`p.
Analogously, imagine the bodyguard and secretary as both
part of a conversational network which
circulates the visitors' request to see Jones, and eventually
the response that Jones is unavailable (which
implies a counter-request that the visitors leave).
Perhaps neither bodyguard nor secretary know all
details about Jones's location; but they can still route
messages as part of the overall cycle where
we ask to see Jones and they ask us to leave.
If this `q.message-passing cycle` is, in its
most endemic analysis (outside of any
retraoctive reductionism), `i.not` a logical
system %-- but is rather some other kind of
structured system %-- then the (properly non-reductive)
semantics is a `q.message-passing semantics` or
`q.instruction-network semantics` rather than a
`q.truth-theoretic semantics` %-- `i.even if` these
models `i.do` have a reductive analysis to some
logical axiomatics.  The analogy is again that
Biology is not a Chemistry `i.even if` Biological
models have a reductive analysis as chemical models.
`p`

`p.
Suppose I am writing a function which counts the
number of non-blank, non-comment
lines in a file.  My implementation might start like this
(in pseudo-code):

`sentenceList,
`sentenceItem; \label{itm:file} File f = File.open(path, File.READ\_ONLY);
`sentenceItem; if f.isEmpty() return 0;
`sentenceList`

So the first line tries to open a file with the
specified path, and the second line checks if the file
is indeed open and non-empty.  If not, it returns the
number zero, meaning that there are no non-blank non-comment
lines in the file.
`p`

`p.
In a typical application framework a file will be
opened if it exists and if the current user has permission
to read and/or write to/from the file (here the necessary
permission is read-only).  For sake of presentation
I assume that a file is considered non-empty
only if it is open and has some content (i.e., you
can read something from the file).  So if
the file `i.is` empty, that can mean several things:
either it does not exist; or it cannot be opened because
of inadequate permissions; or it `i.can` be
opened but has no content.  My function is
noncommital and returns zero in each of these cases.
In particular, I gloss over some information:
the zero return value is analogous to Mr. Jones
being `q.unavailable` for an interview.
`p`

`p.
On this basis, it seems as if the `q.meaning` of my
call to open the file is not a matter of
ascertaining or bringing about certain truth
conditions.  It is true that my instruction
may bring about certain truths (specifically, make it true
that the file is open).  But we should
not conclude that this potential state of affairs is
what the instruction `i.means`/.  As the programmer, I
do not `q.want` the file to be opened; I have no
vested interest (this is not like my wanting milk
for coffee, or wishing to open a beer bottle).  Instead,
I am an intermediary between application-users and
the system kernel: my role is translating what `i.users`
want into system instructions.  Granted, presumably the
`i.user` wants the file she's interested in to be opened
(as an intermediate step toward getting information
from that file).  But what I contribute as
code are `i.instructions`/, and instructions have
an effect on the state of the overall computational
environment where my application is hosted.
In the general case I am not aware of which
new state obtains.  Attempting to open a file
may cause it to be opened, but it may also
cause the software reprsentation of that
file %-- a so-called `q.handle` %-- to acquire a flag
indicating that the referenced file does not exist
(i.e., its path descrribes a nonexistent location),
or that it does exist but cannot be opened due to
insufficient permission, or that the permissions
are satisfactory but there is a temporary lock
from another application writing to the file.
If needed I could attempt to ascertain the file's state
at this level of detail, but it turns out to be
irrelevant to my own algorithm.  In short,
insofar as the `q.meaning` of computer code are the
instructions it emits, these meanings correspond
to state-changes only in coarse-grained ways.
There may be propositional content associated to each possible
state %-- there are propositions that
the file is open, or nonxistent, or inaccessible,
or temporarily locked %-- but the code does not engage
the question of `i.which` proposition is
(or becomes) true.
`p`

`subsection.Meanings and State-Change`
`p.
Underlying both these formal and natural
language examples is the idea that the meanings
of expressions are associated with changes of
something's state: computer statements are instructions
to change state and a large class of linguistic
expressions are requests to do so.  In this vein,
meanings are `q.tools` to effectuate state change or
to initiate state-change processes.  This perspective is
probably incompatible with a notion
of `q.meanings as propositions`/, because it is hard to see
how propositions (or even propositional contents) could be `i.tools`/.
The meaning of a hammer is not prima facie the fact that the
nail is now in the board.
`p`

`p.
Granted, whenever there is a state-change there is a
corresponding proposition to the effect that something
now in state `Stwo; whereas it was before in `Sone;.
And even if an instruction/request cannot be fulfilled, there
is the concordant proposition that something is
still in `Sone; and can `i.not` be brought into
`Stwo;.  So it is trivial to read logical structures
onto linguistic eventualities, by leveraging
the idea that for any conceivable
state of any conceivable state-bearer there exists a
proposition that such bearer is in such state.
`p`

`p.
The problem for truth-theoretic semantics, as
I see it, is that these trivial state-to-proposition
conversions are just that %-- theoretically trivial.
We should not care about a `i.trivial` truth-semantic
theory.  If we have a semantic theory wherein, let's
say, `q.meanings` are really `i.initiators of
state-change processes`/, then we can trivially
convert this into a truth-theoretic theory.  But
that is not an intersting truth-theoretic semantics;
it is a trivial truth-theoretic theory grafted onto
an interesting `q.state change` theory.
`p`

`p.
So much is not to call truth-theoretic semantics
uninteresting.  But for us to take truth-theoretic semantics
seriously we need to accept the idea that this
paradigm can `i.motivate` analysis which leads to
interesting results, taking us somewhere we may not
arrive otherwise.  The fact that a given semantic theory
has some formulaic translation into truth-thoretic terms
does not guarantee that truth-theoretic intuitions
actually play an important role in that other theory.
`p`

`p.
To give a concrete example, I have mentioned Zhaohui Luo's
type-theoretic semantics in a couple of contexts here.  I think
Luo's models are convincing and important, but I also
(for what it's worth) have a slight metatheoretical
objection, which is that Luo's type theory is
(like most academic type theory) presented as a kind of
logical system.  (I would be similarly curmudgeonly
`visavis; Shan's monadic analyses, that I mention later, and
other applications of theoretical computer science to studies
of natural %-- actually, even programming %-- languages).
The motivation seems to be that
logical type theory can define the logical
conditions regulating natural-language semantics, as a
way to leverage type-thoertic structures to explain
natural-language meaning.  But this
methodology forecloses an analysis wherein logical
conditions are tangential to language per se.
`p`

`p.
We can equally, I believe, develop a
type-theoretic semantics as a theory
of `i.typed instructions` or `i.typed messages` or
`i.typed side-effects`/: type theory works in a
message-passing or side-effect or instruction-network
semantics as well as a truth-theoretic semantics.
The difference is that in the first case we are
dealing with side-effects or instructions as
phenomena to which types can be ascribed, whereas
in the second case we `i.define` types by fully
articulating their axiomatic constraints.  The latter is more
complete than the former, because in a mathematical type theory
we do not take `q.messages`/, `q.instructions`/, or `q.side effects`
as theoretical primitives.  Analogously, a mathematical
type theory is more complete than applied type theory
as in, say, the `Cpp; type system, which takes the basic
structures of the `Cpp; language as untheorized givens
(like biological analysis taking medical data as givens).
But this is an example
of where logical completeness does not necessarily confer
greater explanatory merit.
`p`

`p.
Let's assume that understanding
language involves some sort of `q.messages` communicated between
different cognitive processing systems, so the `q.units` of
linguistic processing are embodied in whatever
neurological substrata realize cognitive dynamics in general.
A type-theoretic semantics would accordingly conceive
that there is an architecture of types which we can attach
to units of a neurologically realizable cognitive system
%-- analogous to how `Cpp; assigns types to values
digitally realized in binary data structures (in practice,
byte-sequences).  Type theory is not a theory of the
substrata that `i.bear` types.  Applied type theory does
not `i.need` to encompass analysis of how digital or
cognitive processing works, because that physicalistic
demystification is the labor of other sciences.  Mathematical
completeness is a desirable quality of theories about abstract systems,
but both language and computer software are physically
realized systems (however abstract their specifications).
As concrete in that sense, they are best treated as vehicles
of multi-scientific explanatory combinations, where
each theory is intermediary between others.  In that metascientific
sense, as I intimated earlier, completeness
is `i.not` a merit if it isolates a theory from
other theories which ontologically complete it.
`p`

`p.
For truth-theoretic intuitions to be legitimately
consequential toward a semantic theory, we need to
ascertain to what degree logical structures
actually play a cognitive role in how we use
language to accomplish things in the world.  Obviously,
as rational beings our thought processes will
be informed by logic and to some degree can be
retroactively modeled via logical complexes.
But `q.logic` appears to play a role in these
cognitive operations only indirectly.  `i.There seems
to be some medium %-- perhaps conceptual roles,
or state-changes %-- that `q.carries` logic
into the cognitive realm`/.  We should reject
truth-theoretic semantics if it seems to
proceed as if that `q.medium` can be sidetracked
%-- that we can analyze a logical form in language
directly, without analyzing the vehicle
by which logical considerations can enter
language processing.
`p`


`subsection.Truth Conditions are not Polar`
`p.
My second quibble with truth-theoretic semantics
is that it relies on a certain `facondeparler;.
We (in the context of analysis, not at her house) might
say something like:


`sentenceList,
`sentenceItem; \label{itm:wants} Grandma wants the proposition `q.the kitchen
window is closed` to be true.
`sentenceItem; \label{itm:cold} Grandma wants the proposition
`q.I am cold` to be false.
`sentenceList`

My prior analysis focused on the fact that the more relevant
proposition is that in (\ref{itm:cold}), and we have to
read (\ref{itm:cold}) from (\ref{itm:wants}).
But it should also be obvious
that grandma does not care about `i.propositions`/.
She only cares about `q.I am cold` as a `i.proposition`
because she does not want to be cold.
`p`

`p.
By contrast, sometimes people care about propositions
`i.as propositions`/.  A mathematician who has
staked her reputation on a conjecture may want
the conjuecture to be true.  But this desire is not
like the desire of a Sanders or a Toronto Maple
Leafs supporter to want propositions like
`q.Sanders has won` or `q.Toronto has won` to
be true.  Assume the mathematician's conjecture lies
in an obscure field where there are no
apparent real-world consequences with
benefits that can proceed from truth rather than
falsehood (it's not like, say, the conjecture
will allow her to prove the validity of an
encryption sheme she can monetize).
`p`

`p.
One way to put this is that the mathematician
desires a `i.proposition` to be true, whereas the
Leafs or Sanders supporters
want certain `i.propostional content` to be true.
But if we have to bring in propositional
content, our analysis %-- so it
seems %-- becomes circular.  If the propositional
content of `q.the Leafs win the cup` is that the Leafs
win the cup, then a fan who wants the Leafs to
win the cup obviously wants the propositional content
of `q.the Leafs win the cup` to be true %-- but that's
because the idea of the Leafs winning the cup
`i.is` the propositional content of
`q.the Leafs win the cup`/, reading the quoted version
as an operator to make the sentence into a
name for the relevant proposition.
`p`

`p.
Let's say that there are two inverse operators:
one maps an idea onto a proposition,
and one maps the proposition back onto the
idea, which is its `q.content`/.  A semantic
analysis would be circular if it just immediately
reversed one operator with the other.  Having said that,
the reversal may be `i.separated` by several steps, making
it non-trivial.  Suppose the Leafs are playing
the Jets:

`sentenceList,
`sentenceItem; \label{itm:rooting} Are you rooting for the Jets?
`sentenceItem; Well, I want the Leafs to win.
`sentenceList`

The second speaker indirectly answers the first in the negative.
This is conversationally reasonable %-- it does not violate any
Maxim of Relevance %-- because the first
speaker has available a chain of inference like:

`sentenceList,
`sentenceItem; There is a proposition (call it `POne;)
whose propositional content is that the Jets win
and a proposition (`PTwo;) whose content is that the Leafs win.
`sentenceItem; \label{itm:entail} `PTwo; entails the negation of `POne;.
`sentenceItem; He wants the content of `PTwo; to be true.
`sentenceItem; \label{itm:false} His wishes are only consistent
with `POne; being false.
`sentenceItem; \label{itm:Jets} He wants the content of `POne; to be false.
`sentenceList`

The interesting steps here are at (\ref{itm:entail}) and
(\ref{itm:false}): in these steps
of reasoning the predicate relation between propositions
is expressly thematized.  In the course of
understanding language, there may be occasions when we
need to identify logical connectives as implicit
to the conceptual framework which a speaker is obviously
assuming.  In that case we are working with
propositions rather than propositional content:
there is nothing in the idea of a Leafs victory
`i.a priori` that contains the idea of a Jets
defeat.  The negative entailment relation only arises
in particular situations %-- when the two teams
play each other (and implicitly further restrictions,
like there are no draws or suspended games).
`p`

`p.
It is, in short, a `i.feature` of a specific situation that
the idea `q.Leafs win` entails the negation of
`q.Jets win`/; ergo, logical connectives are
one facet of situational models `i.sometimes`
relevant to linguistic processes.  Similarly, speaker
sentiment is `i.sometimes` relevant.  But there
is a structural isolation between these `q.systems`/:
those `q.processing units` that can bear speaker
sentiment (polarity) are different
from those that can bear logical connectives
(except in unusual cases, like the mathematician
rooting for her conjecture).
`p`

`p.
When we analyze a fan's sentiment `i.wanting` the
Leafs to win, we are analyzing polarity `visavis;
propositional `i.content`/.  When we observe
negative entailment, we are analyzing relations
among `i.propositions`/.  The proposition
`q.encapsulates` the content so it can be part
of logistic structures, where connectives like
entailment and disjunction make sense.  In
computer science, the technical pattern of
such `q.encapsulation` is often
called a `q.monad`/, and monadic analysis has been
adopted in linguistics as well, following
Chung-Chieh Shan.  We can say that logical propositions
`i.per se` are monadic packages that `q.wrap` propositional
content, subject it to some logical manipulation,
and at some later point in processing `q.retrieve`
the content from the proposition.  This is not circular
because the content is not `i.immediately` extracted from
the monad.  In (\ref{itm:Jets}), the content wrapped in
`POne; is held through several processing steps before yielding
the final interpretation (viz., that he wants the Jets to lose).
The final extraction corresponds to transforming
`q.He wants the proposition that the Jets lose to be false`
to `q.He wants the Jets to lose`/.  Stated side-by-side,
this transform is redundant.  The difference is that
here the original proposition `Ptwo; is not
directly asserted as a linguistic meaning; it rather
falls out of a logical process.
`p`

`p.
On this analysis, there is a `i.part`/, or
`i.substructure`/, of linguistic processing that involves
wrapping propositional content into propositions.
But these wrappings are only meaningful
when there is some `q.delay` between processing
steps %-- essentially, when there is some
explicit sense that a given idea stands in some
well-defined logical reoation to some other idea.
Computer programers can crate `q.trivial` monads
whose behaviors do not deviate at all from an
imperative style of programming, but any code
written with `q.trivial` monads can be refactored
such that the monads disappear.  This is analogous
to the circularity between propositional
content and propositions: the `i.meaning` of
a proposition `i.is` its content, so
the proposition `q.monad` has processing significance
only when the meaning itself needs to be `q.held`
awaiting the resolution of some logical nexus.
If there is no processing structure that demands
the content to be `q.held`/, then the proposition
just `q.decays` to its content, and
essentially disappears.
`p`

`p.
These points suggest that while modeling linguistic
meanings in terms of propositions is `i.sometimes`
appropriate, in the general case it is merely
circular or tautological.  We certainly should not
put forth a theory that the `q.meaning` of an
idea is its proposition %-- the turth is more
the opposite.  The meaning of a proposition is
its propositional content.  So, if we want a
truth-theoretic semantics that is
applicable for general cases %-- not just especially
logically ordered situations, like a winner-take-all
sporting match %-- we need a truth-conditional
theory of propositional `i.content` separate and apart
from a theory of propositions.
`p`

`p.
I am discinclined to believe that such a theory is possible,
since I think we can give a theory of propositional
content but I don't think logic would
figure strongly in it.  Having said that, I should
now explain what such a theory of propositional
content `i.should` look like, and I'll leave it as a
(mostly) rhetorical question whether this theory
does or does not leverage logic or something else.
`p`
